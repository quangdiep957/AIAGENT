#!/usr/bin/env python3
"""
Database Manager - Qu·∫£n l√Ω k·∫øt n·ªëi MongoDB c∆° b·∫£n
"""

import os
import logging
from dotenv import load_dotenv
from pymongo import MongoClient

# Load environment variables
load_dotenv()

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# MongoDB connection from environment
MONGODB_CONNECTION = os.getenv('CONNECTION', 'mongodb://localhost:27017/')

class DatabaseManager:
    """
    Qu·∫£n l√Ω k·∫øt n·ªëi MongoDB c∆° b·∫£n
    - K·∫øt n·ªëi database
    - Qu·∫£n l√Ω collections
    - Th·ª±c hi·ªán c√°c thao t√°c CRUD c∆° b·∫£n
    """
    
    def __init__(self):
        """Kh·ªüi t·∫°o k·∫øt n·ªëi MongoDB"""
        self.client = None
        self.db = None
        self.connect()
    
    def connect(self):
        """K·∫øt n·ªëi ƒë·∫øn MongoDB"""
        try:
            # T·∫°o k·∫øt n·ªëi MongoDB
            self.client = MongoClient(MONGODB_CONNECTION)
            
            # Test k·∫øt n·ªëi
            self.client.admin.command('ping')
            logger.info("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!")
            
            # Li·ªát k√™ t·∫•t c·∫£ databases c√≥ s·∫µn
            db_names = self.client.list_database_names()
            logger.info(f"üìÅ C√°c databases c√≥ s·∫µn: {db_names}")
            
            # Ch·ªçn database ƒë·ªÉ s·ª≠ d·ª•ng - ∆∞u ti√™n study_db
            if 'study_db' in db_names:
                # S·ª≠ d·ª•ng study_db n·∫øu c√≥
                self.db = self.client['study_db']
                logger.info(f"üéØ ƒêang s·ª≠ d·ª•ng database: study_db")
            else:
                # T·∫°o study_db n·∫øu ch∆∞a c√≥
                self.db = self.client['study_db']
                logger.info(f"üéØ T·∫°o v√† s·ª≠ d·ª•ng database: study_db")
            
        except Exception as e:
            logger.error(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi MongoDB: {e}")
            raise
    
    def get_collections(self):
        """L·∫•y danh s√°ch t·∫•t c·∫£ collections trong database"""
        try:
            collections = self.db.list_collection_names()
            logger.info(f"üìÅ C√°c collections c√≥ s·∫µn: {collections}")
            return collections
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi l·∫•y collections: {e}")
            return []
    
    def get_data_from_collection(self, collection_name, limit=10, filter_query=None):
        """
        L·∫•y d·ªØ li·ªáu t·ª´ m·ªôt collection c·ª• th·ªÉ
        
        Args:
            collection_name (str): T√™n collection
            limit (int): S·ªë l∆∞·ª£ng documents t·ªëi ƒëa tr·∫£ v·ªÅ
            filter_query (dict): B·ªô l·ªçc MongoDB (t√πy ch·ªçn)
        
        Returns:
            list: Danh s√°ch documents
        """
        try:
            collection = self.db[collection_name]
            
            if filter_query:
                cursor = collection.find(filter_query).limit(limit)
            else:
                cursor = collection.find().limit(limit)
            
            documents = list(cursor)
            logger.info(f"üìÑ ƒê√£ l·∫•y {len(documents)} documents t·ª´ {collection_name}")
            return documents
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ {collection_name}: {e}")
            return []
    
    def count_documents(self, collection_name, filter_query=None):
        """ƒê·∫øm s·ªë l∆∞·ª£ng documents trong collection"""
        try:
            collection = self.db[collection_name]
            if filter_query:
                count = collection.count_documents(filter_query)
            else:
                count = collection.estimated_document_count()
            
            logger.info(f"üìä Collection {collection_name} c√≥ {count} documents")
            return count
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi ƒë·∫øm documents trong {collection_name}: {e}")
            return 0
    
    def search_documents(self, collection_name, search_query, limit=10):
        """
        T√¨m ki·∫øm documents s·ª≠ d·ª•ng text search ho·∫∑c regex
        
        Args:
            collection_name (str): T√™n collection
            search_query (dict): C√¢u query t√¨m ki·∫øm
            limit (int): S·ªë l∆∞·ª£ng k·∫øt qu·∫£ t·ªëi ƒëa
        
        Returns:
            list: Danh s√°ch documents ph√π h·ª£p
        """
        try:
            collection = self.db[collection_name]
            cursor = collection.find(search_query).limit(limit)
            documents = list(cursor)
            
            logger.info(f"üîç T√¨m th·∫•y {len(documents)} documents ph√π h·ª£p v·ªõi ti√™u ch√≠ t√¨m ki·∫øm")
            return documents
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi t√¨m ki·∫øm trong {collection_name}: {e}")
            return []
    
    def close_connection(self):
        """ƒê√≥ng k·∫øt n·ªëi MongoDB"""
        if self.client:
            self.client.close()
            logger.info("üîí ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB")

# Demo function ƒë·ªÉ test DatabaseManager
def demo_database_operations():
    """Demo c√°c thao t√°c database c∆° b·∫£n"""
    try:
        print("üöÄ Demo Database Manager")
        print("=" * 40)
        
        # Kh·ªüi t·∫°o database manager
        db_manager = DatabaseManager()
        
        # L·∫•y t·∫•t c·∫£ collections
        collections = db_manager.get_collections()
        print(f"\nüìÅ C√°c collections c√≥ s·∫µn: {collections}")
        
        # N·∫øu c√≥ collections, demo vi·ªác l·∫•y d·ªØ li·ªáu
        if collections:
            # L·∫•y d·ªØ li·ªáu t·ª´ collection ƒë·∫ßu ti√™n
            first_collection = collections[0]
            print(f"\nüìÑ D·ªØ li·ªáu m·∫´u t·ª´ '{first_collection}':")
            
            # ƒê·∫øm s·ªë documents
            count = db_manager.count_documents(first_collection)
            print(f"T·ªïng s·ªë documents: {count}")
            
            # L·∫•y documents m·∫´u
            sample_data = db_manager.get_data_from_collection(first_collection, limit=3)
            for i, doc in enumerate(sample_data, 1):
                print(f"\nDocument {i}:")
                # In ra m·ªôt v√†i tr∆∞·ªùng ƒë·∫ßu ti√™n c·ªßa m·ªói document
                for key, value in list(doc.items())[:3]:
                    print(f"  {key}: {value}")
                if len(doc.items()) > 3:
                    print(f"  ... v√† {len(doc.items()) - 3} tr∆∞·ªùng kh√°c")
        
        else:
            print("Kh√¥ng t√¨m th·∫•y collections n√†o trong database")
        
        # ƒê√≥ng k·∫øt n·ªëi
        db_manager.close_connection()
        
    except Exception as e:
        print(f"‚ùå Demo th·∫•t b·∫°i: {e}")

if __name__ == "__main__":
    demo_database_operations()
