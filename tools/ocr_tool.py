"""
OCR Tool - Optical Character Recognition
ƒê·ªçc ch·ªØ t·ª´ ·∫£nh v√† PDF scan s·ª≠ d·ª•ng Tesseract OCR v√† EasyOCR
"""

import os
import cv2
import numpy as np
from typing import Dict, List, Any, Optional, Tuple
from pathlib import Path
from datetime import datetime
import base64
import io

# Import c√°c th∆∞ vi·ªán OCR
try:
    import pytesseract
    TESSERACT_AVAILABLE = True
except ImportError:
    TESSERACT_AVAILABLE = False

try:
    import easyocr
    EASYOCR_AVAILABLE = True
except ImportError:
    EASYOCR_AVAILABLE = False

try:
    from PIL import Image, ImageEnhance, ImageFilter
    PIL_AVAILABLE = True
except ImportError:
    PIL_AVAILABLE = False

try:
    import pdf2image
    PDF2IMAGE_AVAILABLE = True
except ImportError:
    PDF2IMAGE_AVAILABLE = False

class OCRTool:
    """Tool OCR ƒë·ªÉ ƒë·ªçc text t·ª´ ·∫£nh v√† PDF scan"""
    
    def __init__(self, ocr_engine: str = "auto"):
        """
        Kh·ªüi t·∫°o OCRTool
        
        Args:
            ocr_engine (str): OCR engine s·ª≠ d·ª•ng ("tesseract", "easyocr", "auto")
        """
        self.ocr_engine = ocr_engine
        self.easyocr_reader = None
        
        # Kh·ªüi t·∫°o EasyOCR reader n·∫øu c√≥
        if EASYOCR_AVAILABLE and ocr_engine in ["easyocr", "auto"]:
            try:
                # H·ªó tr·ª£ ti·∫øng Vi·ªát v√† ti·∫øng Anh
                self.easyocr_reader = easyocr.Reader(['vi', 'en'], gpu=False)
                print(f"‚úÖ EasyOCR reader ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng")
            except Exception as e:
                print(f"‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o EasyOCR: {e}")
                self.easyocr_reader = None
        
        # Ki·ªÉm tra Tesseract
        self.tesseract_available = False
        if TESSERACT_AVAILABLE:
            try:
                # Ki·ªÉm tra ƒë∆°n gi·∫£n b·∫±ng c√°ch test version
                version = pytesseract.get_tesseract_version()
                self.tesseract_available = True
                print(f"‚úÖ Tesseract version {version} ƒë√£ ƒë∆∞·ª£c ph√°t hi·ªán")
            except Exception as e:
                print(f"‚ùå Tesseract kh√¥ng kh·∫£ d·ª•ng: {e}")
                # Th·ª≠ test kh√°c
                try:
                    # Test v·ªõi string ƒë∆°n gi·∫£n
                    from PIL import Image
                    import io
                    
                    # T·∫°o ·∫£nh test trong memory
                    test_img = Image.new('RGB', (100, 30), color='white')
                    from PIL import ImageDraw
                    draw = ImageDraw.Draw(test_img)
                    draw.text((10, 10), "test", fill='black')
                    
                    # Convert to bytes
                    img_byte_arr = io.BytesIO()
                    test_img.save(img_byte_arr, format='PNG')
                    img_byte_arr.seek(0)
                    
                    # Test OCR
                    result = pytesseract.image_to_string(Image.open(img_byte_arr))
                    self.tesseract_available = True
                    print(f"‚úÖ Tesseract ho·∫°t ƒë·ªông v·ªõi memory test")
                except Exception as test_error:
                    print(f"‚ùå Tesseract test cu·ªëi c≈©ng th·∫•t b·∫°i: {test_error}")
                    self.tesseract_available = False
        
        # Debug availability
        print(f"üîç OCR Engine Status:")
        print(f"  - TESSERACT_AVAILABLE: {TESSERACT_AVAILABLE}")
        print(f"  - Tesseract working: {self.tesseract_available}")
        print(f"  - EASYOCR_AVAILABLE: {EASYOCR_AVAILABLE}")
        print(f"  - EasyOCR Reader: {self.easyocr_reader is not None}")
        print(f"  - Selected engine: {ocr_engine}")
        
        # C·∫•u h√¨nh Tesseract
        if TESSERACT_AVAILABLE:
            # ƒê∆∞·ªùng d·∫´n Tesseract (c√≥ th·ªÉ c·∫ßn ƒëi·ªÅu ch·ªânh theo h·ªá th·ªëng)
            # pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
            pass
    
    def _preprocess_image(self, image_path: str, enhance: bool = True, max_size: int = 2048, for_vietnamese: bool = True) -> np.ndarray:
        """
        Ti·ªÅn x·ª≠ l√Ω ·∫£nh ƒë·ªÉ c·∫£i thi·ªán ƒë·ªô ch√≠nh x√°c OCR
        
        Args:
            image_path (str): ƒê∆∞·ªùng d·∫´n ·∫£nh
            enhance (bool): C√≥ enhance ·∫£nh kh√¥ng
            max_size (int): K√≠ch th∆∞·ªõc t·ªëi ƒëa cho c·∫°nh d√†i nh·∫•t
            for_vietnamese (bool): C√≥ t·ªëi ∆∞u cho ti·∫øng Vi·ªát kh√¥ng
            
        Returns:
            np.ndarray: ·∫¢nh ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
        """
        try:
            # ƒê·ªçc ·∫£nh b·∫±ng OpenCV
            image = cv2.imread(image_path)
            if image is None:
                raise ValueError("Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh")
            
            # Resize ·∫£nh n·∫øu qu√° l·ªõn ƒë·ªÉ tr√°nh l·ªói memory
            height, width = image.shape[:2]
            if max(height, width) > max_size:
                scale = max_size / max(height, width)
                new_width = int(width * scale)
                new_height = int(height * scale)
                image = cv2.resize(image, (new_width, new_height), interpolation=cv2.INTER_AREA)
                print(f"üîß Resized image from {width}x{height} to {new_width}x{new_height}")
            
            if enhance:
                # Chuy·ªÉn sang grayscale
                gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
                
                if for_vietnamese:
                    # Preprocessing ƒë·∫∑c bi·ªát cho ti·∫øng Vi·ªát
                    print("üîß Applying Vietnamese text preprocessing...")
                    
                    # TƒÉng k√≠ch th∆∞·ªõc n·∫øu ·∫£nh qu√° nh·ªè
                    if min(gray.shape) < 600:
                        scale_factor = 600 / min(gray.shape)
                        new_w = int(gray.shape[1] * scale_factor)
                        new_h = int(gray.shape[0] * scale_factor)
                        gray = cv2.resize(gray, (new_w, new_h), interpolation=cv2.INTER_CUBIC)
                        print(f"üîß Upscaled for better text recognition: {new_w}x{new_h}")
                    
                    # TƒÉng contrast m·∫°nh h∆°n
                    clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
                    enhanced = clahe.apply(gray)
                    
                    # Kh·ª≠ noise v·ªõi median filter (t·ªët h∆°n cho text)
                    denoised = cv2.medianBlur(enhanced, 3)
                    
                    # Sharpen filter ƒë·ªÉ l√†m r√µ text
                    kernel = np.array([[-1,-1,-1], [-1,9,-1], [-1,-1,-1]])
                    sharpened = cv2.filter2D(denoised, -1, kernel)
                    
                    # Adaptive threshold t·ªët h∆°n cho text
                    processed = cv2.adaptiveThreshold(sharpened, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)
                else:
                    # Preprocessing th√¥ng th∆∞·ªùng
                    # Kh·ª≠ noise b·∫±ng Gaussian blur
                    denoised = cv2.GaussianBlur(gray, (5, 5), 0)
                    
                    # TƒÉng contrast b·∫±ng CLAHE
                    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
                    enhanced = clahe.apply(denoised)
                    
                    # Threshold ƒë·ªÉ t·∫°o ·∫£nh binary
                    _, processed = cv2.threshold(enhanced, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
                
                return processed
            else:
                return image
                
        except Exception as e:
            print(f"L·ªói khi x·ª≠ l√Ω ·∫£nh: {e}")
            # Fallback: ƒë·ªçc ·∫£nh g·ªëc
            return cv2.imread(image_path)
    
    def _preprocess_image_pil(self, image_path: str) -> Any:
        """
        Ti·ªÅn x·ª≠ l√Ω ·∫£nh b·∫±ng PIL
        
        Args:
            image_path (str): ƒê∆∞·ªùng d·∫´n ·∫£nh
            
        Returns:
            Image.Image: ·∫¢nh ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
        """
        try:
            image = Image.open(image_path)
            
            # Convert sang grayscale n·∫øu c·∫ßn
            if image.mode != 'L':
                image = image.convert('L')
            
            # TƒÉng contrast
            enhancer = ImageEnhance.Contrast(image)
            image = enhancer.enhance(2.0)
            
            # TƒÉng ƒë·ªô s·∫Øc n√©t
            image = image.filter(ImageFilter.SHARPEN)
            
            return image
            
        except Exception as e:
            print(f"L·ªói khi x·ª≠ l√Ω ·∫£nh PIL: {e}")
            return Image.open(image_path)
    
    def _ocr_with_tesseract(self, image_path: str, languages: str = "vie+eng") -> Dict[str, Any]:
        """
        OCR s·ª≠ d·ª•ng Tesseract v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u cho ti·∫øng Vi·ªát
        
        Args:
            image_path (str): ƒê∆∞·ªùng d·∫´n ·∫£nh
            languages (str): Ng√¥n ng·ªØ OCR
            
        Returns:
            Dict[str, Any]: K·∫øt qu·∫£ OCR
        """
        try:
            if not TESSERACT_AVAILABLE or not self.tesseract_available:
                return {
                    "success": False,
                    "error": "Tesseract ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ho·∫∑c kh√¥ng ho·∫°t ƒë·ªông"
                }
            
            print("üöÄ Trying Tesseract with Vietnamese optimization...")
            
            # Ti·ªÅn x·ª≠ l√Ω ·∫£nh v·ªõi t·ªëi ∆∞u cho ti·∫øng Vi·ªát
            processed_image = self._preprocess_image(image_path, enhance=True, for_vietnamese=True)
            
            # Th·ª≠ nhi·ªÅu c·∫•u h√¨nh PSM kh√°c nhau cho ti·∫øng Vi·ªát
            configs = [
                '--oem 3 --psm 6 -c tessedit_char_whitelist=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz√Ä√Å√Ç√É√à√â√ä√å√ç√í√ì√î√ï√ô√ö√ù√†√°√¢√£√®√©√™√¨√≠√≤√≥√¥√µ√π√∫√ΩƒÇƒêƒ®≈®∆†ƒÉƒëƒ©≈©∆°∆ØƒÇ·∫†·∫¢·∫§·∫¶·∫®·∫™·∫¨·∫Æ·∫∞·∫≤·∫¥·∫∂·∫∏·∫∫·∫º·ªÄ·ªÄ·ªÇ∆∞ƒÉ·∫°·∫£·∫•·∫ß·∫©·∫´·∫≠·∫Ø·∫±·∫≥·∫µ·∫∑·∫π·∫ª·∫Ω·ªÅ·ªÅ·ªÉ·ªÑ·ªÜ·ªà·ªä·ªå·ªé·ªê·ªí·ªî·ªñ·ªò·ªö·ªú·ªû·ª†·ª¢·ª§·ª¶·ª®·ª™·ªÖ·ªá·ªâ·ªã·ªç·ªè·ªë·ªì·ªï·ªó·ªô·ªõ·ªù·ªü·ª°·ª£·ª•·ªß·ª©·ª´·ª¨·ªÆ·ª∞·ª≤·ª¥√ù·ª∂·ª∏·ª≠·ªØ·ª±·ª≥·ªµ·ª∑·ªπ0123456789 .,;:!?()[]{}\"\'+-*/=<>%$&@#',
                '--oem 3 --psm 4',  # Single column of text
                '--oem 3 --psm 6',  # Single uniform block of text
                '--oem 3 --psm 8',  # Single word
                '--oem 3 --psm 3'   # Fully automatic page segmentation
            ]
            
            best_result = None
            best_confidence = 0
            
            for config in configs:
                try:
                    print(f"üîß Trying config: {config}")
                    
                    # L·∫•y text v·ªõi confidence
                    data = pytesseract.image_to_data(processed_image, lang=languages, config=config, output_type=pytesseract.Output.DICT)
                    
                    # T√≠nh confidence trung b√¨nh
                    confidences = [int(conf) for conf in data['conf'] if int(conf) > 0]
                    avg_confidence = sum(confidences) / len(confidences) if confidences else 0
                    
                    # L·∫•y text
                    text = pytesseract.image_to_string(processed_image, lang=languages, config=config)
                    text = text.strip()
                    
                    print(f"   üìä Text length: {len(text)}, Confidence: {avg_confidence:.1f}%")
                    
                    if len(text) > 10 and avg_confidence > best_confidence:
                        best_result = {
                            'text': text,
                            'confidence': avg_confidence,
                            'config': config
                        }
                        best_confidence = avg_confidence
                        
                except Exception as e:
                    print(f"   ‚ùå Config failed: {e}")
                    continue
            
            if best_result is None:
                return {
                    "success": False,
                    "error": "Kh√¥ng th·ªÉ tr√≠ch xu·∫•t text v·ªõi b·∫•t k·ª≥ c·∫•u h√¨nh n√†o"
                }
            
            text = best_result['text']
            
            print(f"üéØ Best result: {len(text)} chars, confidence: {best_result['confidence']:.1f}%")
            print(f"üìù Sample: {text[:200]}...")
            
            # T√≠nh word count
            words = text.split()
            word_count = len(words)
            
            return {
                "success": True,
                "text": text,
                "word_count": word_count,
                "average_confidence": best_result['confidence'],
                "engine": "tesseract",
                "language": languages,
                "config_used": best_result['config']
            }
            
            # N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£, th·ª≠ v·ªõi PSM kh√°c
            if not text.strip():
                print("üîÑ Trying with different PSM settings...")
                config = '--oem 3 --psm 3'  # PSM 3: fully automatic page segmentation
                text = pytesseract.image_to_string(processed_image, lang=languages, config=config)
            
            # L·∫•y th√¥ng tin chi ti·∫øt (bounding boxes)
            data = pytesseract.image_to_data(processed_image, lang=languages, output_type=pytesseract.Output.DICT)
            
            # T·∫°o danh s√°ch t·ª´ v·ªõi v·ªã tr√≠
            words = []
            confidences = []
            
            for i in range(len(data['text'])):
                if int(data['conf'][i]) > 0:  # Ch·ªâ l·∫•y t·ª´ c√≥ confidence > 0
                    word_text = data['text'][i].strip()
                    if word_text:  # Ch·ªâ th√™m t·ª´ kh√¥ng r·ªóng
                        words.append({
                            "text": word_text,
                            "confidence": int(data['conf'][i]),
                            "bbox": {
                                "x": int(data['left'][i]),
                                "y": int(data['top'][i]),
                                "width": int(data['width'][i]),
                                "height": int(data['height'][i])
                            }
                        })
                        confidences.append(int(data['conf'][i]))
            
            # T√≠nh confidence trung b√¨nh
            avg_confidence = sum(confidences) / len(confidences) if confidences else 0
            
            print(f"üìä Tesseract results: {len(text)} chars, {len(words)} words, avg confidence: {avg_confidence:.1f}")
            
            return {
                "success": True,
                "engine": "tesseract",
                "text": text.strip(),
                "words": words,
                "word_count": len([w for w in words if w['text'].strip()]),
                "average_confidence": avg_confidence,
                "languages": languages
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"L·ªói Tesseract OCR: {str(e)}",
                "engine": "tesseract"
            }
    
    def _ocr_with_easyocr(self, image_path: str) -> Dict[str, Any]:
        """
        OCR s·ª≠ d·ª•ng EasyOCR
        
        Args:
            image_path (str): ƒê∆∞·ªùng d·∫´n ·∫£nh
            
        Returns:
            Dict[str, Any]: K·∫øt qu·∫£ OCR
        """
        try:
            if not EASYOCR_AVAILABLE or self.easyocr_reader is None:
                return {
                    "success": False,
                    "error": "EasyOCR ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ho·∫∑c kh·ªüi t·∫°o"
                }
            
            # Ti·ªÅn x·ª≠ l√Ω ·∫£nh (resize ƒë·ªÉ tr√°nh l·ªói memory)
            print(f"üîß Preprocessing image for EasyOCR...")
            processed_image = self._preprocess_image(image_path, enhance=True, max_size=1024)
            
            # OCR v·ªõi EasyOCR
            try:
                print(f"üöÄ Running EasyOCR...")
                results = self.easyocr_reader.readtext(processed_image)
                print(f"üìä EasyOCR found {len(results)} text regions")
            except Exception as e:
                if "memory" in str(e).lower() or "alloc" in str(e).lower():
                    # Th·ª≠ v·ªõi ·∫£nh nh·ªè h∆°n n·ªØa
                    print("‚ö†Ô∏è Memory error, trying with smaller image...")
                    processed_image = self._preprocess_image(image_path, enhance=True, max_size=512)
                    results = self.easyocr_reader.readtext(processed_image)
                    print(f"üìä EasyOCR found {len(results)} text regions (smaller image)")
                else:
                    raise e
            
            # Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£
            text_parts = []
            words = []
            confidences = []
            
            for (bbox, text, confidence) in results:
                print(f"  üìù Found: '{text}' (confidence: {confidence:.3f})")
                if confidence > 0.3:  # Gi·∫£m threshold ƒë·ªÉ l·∫•y nhi·ªÅu text h∆°n
                    text_parts.append(text)
                    words.append({
                        "text": text,
                        "confidence": float(confidence * 100),  # Convert to percentage
                        "bbox": {
                            "points": bbox  # EasyOCR tr·∫£ v·ªÅ 4 ƒëi·ªÉm g√≥c
                        }
                    })
                    confidences.append(confidence * 100)
            
            # K·∫øt h·ª£p text
            full_text = " ".join(text_parts)
            avg_confidence = sum(confidences) / len(confidences) if confidences else 0
            
            print(f"üìä EasyOCR results: {len(full_text)} chars, {len(words)} words, avg confidence: {avg_confidence:.1f}%")
            
            return {
                "success": True,
                "engine": "easyocr",
                "text": full_text,
                "words": words,
                "word_count": len(words),
                "average_confidence": avg_confidence,
                "languages": ["vi", "en"]
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"L·ªói EasyOCR: {str(e)}",
                "engine": "easyocr"
            }
    
    def extract_text_from_image(self, image_path: str, engine: Optional[str] = None) -> Dict[str, Any]:
        """
        Extract text t·ª´ ·∫£nh
        
        Args:
            image_path (str): ƒê∆∞·ªùng d·∫´n ·∫£nh
            engine (Optional[str]): OCR engine c·ª• th·ªÉ
            
        Returns:
            Dict[str, Any]: K·∫øt qu·∫£ OCR
        """
        try:
            # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i
            if not os.path.exists(image_path):
                return {
                    "success": False,
                    "error": "File ·∫£nh kh√¥ng t·ªìn t·∫°i"
                }
            
            # X√°c ƒë·ªãnh engine s·ª≠ d·ª•ng
            use_engine = engine or self.ocr_engine
            
            if use_engine == "auto":
                print(f"üîç Auto mode - checking engines...")
                print(f"  - EasyOCR available: {EASYOCR_AVAILABLE}")
                print(f"  - EasyOCR reader initialized: {self.easyocr_reader is not None}")
                print(f"  - Tesseract available: {TESSERACT_AVAILABLE}")
                
                # ∆Øu ti√™n Tesseract cho ti·∫øng Vi·ªát (t·ªët h∆°n cho vƒÉn b·∫£n gi√°o d·ª•c)
                if self.tesseract_available:
                    print("üöÄ Trying Tesseract first (better for Vietnamese)...")
                    result = self._ocr_with_tesseract(image_path)
                    if result["success"] and len(result["text"]) > 20:  # Ch·ªâ ch·∫•p nh·∫≠n n·∫øu c√≥ ƒë·ªß text
                        print("‚úÖ Tesseract succeeded with good result")
                        return result
                    else:
                        error_msg = result.get('error', f'Short text: {len(result.get("text", ""))} chars')
                        print(f"‚ùå Tesseract failed or low quality: {error_msg}")
                
                # Fallback sang EasyOCR
                if EASYOCR_AVAILABLE and self.easyocr_reader:
                    print("üöÄ Trying EasyOCR as fallback...")
                    result = self._ocr_with_easyocr(image_path)
                    if result["success"]:
                        print("‚úÖ EasyOCR succeeded")
                        return result
                    else:
                        print(f"‚ùå EasyOCR failed: {result.get('error', 'Unknown error')}")
                
                return {
                    "success": False,
                    "error": f"Kh√¥ng c√≥ OCR engine n√†o kh·∫£ d·ª•ng ho·∫∑c t·∫•t c·∫£ ƒë·ªÅu th·∫•t b·∫°i. EasyOCR: {EASYOCR_AVAILABLE and self.easyocr_reader is not None}, Tesseract: {self.tesseract_available}"
                }
            
            elif use_engine == "easyocr":
                return self._ocr_with_easyocr(image_path)
            
            elif use_engine == "tesseract":
                return self._ocr_with_tesseract(image_path)
            
            else:
                return {
                    "success": False,
                    "error": f"OCR engine '{use_engine}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£"
                }
        
        except Exception as e:
            # Fallback khi t·∫•t c·∫£ OCR engines ƒë·ªÅu th·∫•t b·∫°i
            return {
                "success": False,
                "error": f"L·ªói OCR: {str(e)}. Suggestion: File ·∫£nh c√≥ th·ªÉ qu√° l·ªõn ho·∫∑c OCR engines ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë√∫ng c√°ch.",
                "fallback_info": {
                    "message": "Kh√¥ng th·ªÉ ƒë·ªçc text t·ª´ ·∫£nh, nh∆∞ng file ƒë√£ ƒë∆∞·ª£c upload th√†nh c√¥ng",
                    "image_path": image_path,
                    "available_engines": {
                        "easyocr": EASYOCR_AVAILABLE and self.easyocr_reader is not None,
                        "tesseract": self.tesseract_available if hasattr(self, 'tesseract_available') else False
                    }
                }
            }
                
        except Exception as e:
            return {
                "success": False,
                "error": f"L·ªói khi extract text: {str(e)}"
            }
    
    def process_pdf_scan(self, pdf_path: str, output_dir: Optional[str] = None) -> Dict[str, Any]:
        """
        X·ª≠ l√Ω PDF scan (convert th√†nh ·∫£nh v√† OCR)
        
        Args:
            pdf_path (str): ƒê∆∞·ªùng d·∫´n file PDF
            output_dir (Optional[str]): Th∆∞ m·ª•c l∆∞u ·∫£nh t·∫°m
            
        Returns:
            Dict[str, Any]: K·∫øt qu·∫£ OCR t·∫•t c·∫£ trang
        """
        try:
            if not PDF2IMAGE_AVAILABLE:
                return {
                    "success": False,
                    "error": "pdf2image ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
                }
            
            if not os.path.exists(pdf_path):
                return {
                    "success": False,
                    "error": "File PDF kh√¥ng t·ªìn t·∫°i"
                }
            
            # T·∫°o th∆∞ m·ª•c t·∫°m n·∫øu c·∫ßn
            if output_dir is None:
                output_dir = "temp_images"
            
            os.makedirs(output_dir, exist_ok=True)
            
            # Convert PDF th√†nh ·∫£nh
            pages = pdf2image.convert_from_path(pdf_path)
            
            all_results = []
            total_text = ""
            
            for page_num, page in enumerate(pages, 1):
                # L∆∞u page th√†nh ·∫£nh t·∫°m
                temp_image_path = os.path.join(output_dir, f"page_{page_num}.png")
                page.save(temp_image_path, 'PNG')
                
                # OCR cho page n√†y
                page_result = self.extract_text_from_image(temp_image_path)
                
                if page_result["success"]:
                    page_result["page_number"] = page_num
                    all_results.append(page_result)
                    total_text += page_result.get("text", "") + "\n"
                
                # X√≥a ·∫£nh t·∫°m
                if os.path.exists(temp_image_path):
                    os.remove(temp_image_path)
            
            # X√≥a th∆∞ m·ª•c t·∫°m n·∫øu r·ªóng
            try:
                os.rmdir(output_dir)
            except:
                pass
            
            # T√≠nh to√°n th·ªëng k√™
            total_words = sum(result.get("word_count", 0) for result in all_results)
            avg_confidence = sum(result.get("average_confidence", 0) for result in all_results) / len(all_results) if all_results else 0
            
            return {
                "success": True,
                "file_type": "pdf_scan",
                "total_pages": len(pages),
                "processed_pages": len(all_results),
                "pages": all_results,
                "total_text": total_text.strip(),
                "total_word_count": total_words,
                "average_confidence": avg_confidence,
                "processing_date": datetime.utcnow()
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"L·ªói khi x·ª≠ l√Ω PDF scan: {str(e)}"
            }
    
    def batch_ocr(self, image_paths: List[str]) -> Dict[str, Any]:
        """
        X·ª≠ l√Ω OCR nhi·ªÅu ·∫£nh c√πng l√∫c
        
        Args:
            image_paths (List[str]): Danh s√°ch ƒë∆∞·ªùng d·∫´n ·∫£nh
            
        Returns:
            Dict[str, Any]: K·∫øt qu·∫£ OCR t·∫•t c·∫£ ·∫£nh
        """
        try:
            results = []
            total_text = ""
            
            for i, image_path in enumerate(image_paths):
                print(f"Processing image {i+1}/{len(image_paths)}: {os.path.basename(image_path)}")
                
                result = self.extract_text_from_image(image_path)
                result["image_index"] = i
                result["image_name"] = os.path.basename(image_path)
                
                results.append(result)
                
                if result["success"]:
                    total_text += result.get("text", "") + "\n"
            
            # Th·ªëng k√™
            successful = [r for r in results if r["success"]]
            total_words = sum(r.get("word_count", 0) for r in successful)
            avg_confidence = sum(r.get("average_confidence", 0) for r in successful) / len(successful) if successful else 0
            
            return {
                "success": len(successful) > 0,
                "total_images": len(image_paths),
                "successful_images": len(successful),
                "results": results,
                "combined_text": total_text.strip(),
                "total_word_count": total_words,
                "average_confidence": avg_confidence,
                "processing_date": datetime.utcnow()
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"L·ªói khi x·ª≠ l√Ω batch OCR: {str(e)}"
            }
    
    def get_supported_formats(self) -> Dict[str, List[str]]:
        """
        L·∫•y danh s√°ch format ƒë∆∞·ª£c h·ªó tr·ª£
        
        Returns:
            Dict[str, List[str]]: Danh s√°ch format
        """
        return {
            "image_formats": [".jpg", ".jpeg", ".png", ".bmp", ".tiff", ".gif"],
            "pdf_scan": [".pdf"] if PDF2IMAGE_AVAILABLE else [],
            "available_engines": {
                "tesseract": TESSERACT_AVAILABLE,
                "easyocr": EASYOCR_AVAILABLE and self.easyocr_reader is not None
            }
        }

# Example usage
if __name__ == "__main__":
    # Demo usage
    ocr = OCRTool()
    
    print("=== OCR Tool Demo ===")
    print(f"Supported formats: {ocr.get_supported_formats()}")
    
    # T·∫°o ·∫£nh test ƒë∆°n gi·∫£n (n·∫øu c√≥ PIL)
    if PIL_AVAILABLE:
        from PIL import Image, ImageDraw, ImageFont
        
        # T·∫°o ·∫£nh test
        img = Image.new('RGB', (400, 200), color='white')
        draw = ImageDraw.Draw(img)
        
        try:
            # Th·ª≠ d√πng font h·ªá th·ªëng
            font = ImageFont.load_default()
        except:
            font = None
        
        draw.text((50, 50), "Hello World!", fill='black', font=font)
        draw.text((50, 100), "Xin ch√†o Vi·ªát Nam!", fill='black', font=font)
        
        test_image = "test_ocr_image.png"
        img.save(test_image)
        
        # Test OCR
        result = ocr.extract_text_from_image(test_image)
        print(f"OCR result: {result}")
        
        # Cleanup
        if os.path.exists(test_image):
            os.remove(test_image)
    else:
        print("PIL kh√¥ng kh·∫£ d·ª•ng, kh√¥ng th·ªÉ t·∫°o ·∫£nh test")
